name: Build ESPHome Firmware

on:
  issues:
    types: [opened, edited]

jobs:
  build:
    if: contains(github.event.issue.labels.*.name, 'ESPHome')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install ESPHome
      run: |
        python -m pip install esphome

    - name: Read user input from issue
      id: user_input
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        issue_number=${{ github.event.issue.number }}
        issue_body=$(gh issue view $issue_number --json body --jq '.body')
        echo "Issue body: $issue_body"

        # Convert issue body to JSON
        issue_json=$(echo "$issue_body" | jq -R 'split("\n") | map(select(length > 0)) | map(if test("^### ") then . else . end) | . as $in | reduce range(0; length) as $i ({}; . + if ($in[$i] | test("^### ")) then {($in[$i] | gsub("### "; ""; "g")): $in[$i+1]} else {} end)')

        echo "Issue JSON: $issue_json"

        # Extract values from JSON
        device_name=$(echo "$issue_json" | jq -r '.["Device Name"]')
        static_ip=$(echo "$issue_json" | jq -r '.["Static IP"]')
        gateway=$(echo "$issue_json" | jq -r '.["Gateway"]')
        subnet=$(echo "$issue_json" | jq -r '.["Subnet"]')

        # Debugging: Show parsed values
        echo "Parsed values:"
        echo "Device Name: '$device_name'"
        echo "Static IP: '$static_ip'"
        echo "Gateway: '$gateway'"
        echo "Subnet: '$subnet'"

    - name: Update ESPHome YAML
      run: |
        device_yaml="esphome_config/${{ steps.user_input.outputs.device_name }}.yaml"
        sed -i "s/STATIC_IP/${{ steps.user_input.outputs.static_ip }}/" $device_yaml
        sed -i "s/GATEWAY/${{ steps.user_input.outputs.gateway }}/" $device_yaml
        sed -i "s/SUBNET/${{ steps.user_input.outputs.subnet }}/" $device_yaml

    - name: Compile ESPHome Firmware
      run: |
        device_yaml="esphome_config/${{ steps.user_input.outputs.device_name }}.yaml"
        esphome compile $device_yaml

    - name: Upload Firmware
      uses: actions/upload-artifact@v2
      with:
        name: firmware
        path: esphome_config/.esphome/build/*.bin
